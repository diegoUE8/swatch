{"version":3,"sources":["src/js/image/image.service.worker.js","../../src/js/image/image.service.worker.js"],"names":["factory","define","amd","controllers","self","addEventListener","event","id","data","src","options","fetch","AbortController","controller","signal","then","response","blob","postMessage","request","XMLHttpRequest","open","responseType","onload","status","onerror","send","abort"],"mappings":";;;;;CAMC,SAAUA,GACQ,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAOD,GACpDA,IAFD,EAGE,WAAe,aCTjB,IAAMG,EAAc,GAEpBC,KAAKC,iBAAiB,WAAW,SAASC,GACzC,IAAMC,EAAKD,EAAME,KAAKD,GAChBE,EAAMH,EAAME,KAAKC,IACvB,IAAIF,GAAOE,EAAX,CAOA,IAAIC,EACJ,GAAqB,mBAAVC,MAAsB,CAChC,GAAIP,KAAKQ,gBAAiB,CACzB,IAAMC,EAAa,IAAID,gBACvBF,EAAU,CACTI,OAAQD,EAAWC,QAEpBX,EAAYI,GAAMM,EAEFF,MAAMF,EAAKC,GAC1BK,MAAK,SAASC,GACd,OAAOA,EAASC,UAEhBF,MAAK,SAASE,UACPd,EAAYI,GACnBH,KAAKc,YAAY,CAChBT,IAAKA,EACLQ,KAAMA,WAGH,CACN,IAAME,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOZ,GACpBU,EAAQG,aAAe,OACvBH,EAAQI,OAAS,WACZJ,EAAQK,OAAS,KACpBpB,KAAKc,YAAY,CAChBT,IAAKA,EACLQ,KAAME,EAAQH,YAMjBG,EAAQM,QAAU,aAGlBN,EAAQO,YA5CT,CACC,IAAMb,EAAaV,EAAYI,GAC3BM,GACHA,EAAWc","file":"docs\\js\\workers\\image.service.worker.min.js","sourcesContent":[null,"const controllers = {};\r\n\r\nself.addEventListener(\"message\", function(event) {\r\n\tconst id = event.data.id;\r\n\tconst src = event.data.src;\r\n\tif (id && !src) {\r\n\t\tconst controller = controllers[id];\r\n\t\tif (controller) {\r\n\t\t\tcontroller.abort();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tlet options;\r\n\tif (typeof fetch === 'function') {\r\n\t\tif (self.AbortController) {\r\n\t\t\tconst controller = new AbortController();\r\n\t\t\toptions = {\r\n\t\t\t\tsignal: controller.signal,\r\n\t\t\t};\r\n\t\t\tcontrollers[id] = controller;\r\n\t\t}\r\n\t\tconst response = fetch(src, options)\r\n\t\t\t.then(function(response) {\r\n\t\t\t\treturn response.blob();\r\n\t\t\t})\r\n\t\t\t.then(function(blob) {\r\n\t\t\t\tdelete controllers[id];\r\n\t\t\t\tself.postMessage({\r\n\t\t\t\t\tsrc: src,\r\n\t\t\t\t\tblob: blob\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t} else {\r\n\t\tconst request = new XMLHttpRequest();\r\n\t\trequest.open('GET', src);\r\n\t\trequest.responseType = 'blob';\r\n\t\trequest.onload = function() {\r\n\t\t\tif (request.status < 300) {\r\n\t\t\t\tself.postMessage({\r\n\t\t\t\t\tsrc: src,\r\n\t\t\t\t\tblob: request.response\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// new Error('Image didn\\'t load successfully; error code:' + request.statusText);\r\n\t\t\t}\r\n\t\t};\r\n\t\trequest.onerror = function() {\r\n\t\t\t// new Error('There was a network error.');\r\n\t\t};\r\n\t\trequest.send();\r\n\t}\r\n});\r\n\r\n/*\r\nself.addEventListener('message', function(event) {\r\n\t// console.log(event);\r\n\tconst src = event.data;\r\n\tconst response = fetch(src).then(function(response) {\r\n\t\treturn response.blob();\r\n\t}).then(function(blob) {\r\n\t\t// Send the image data to the UI thread!\r\n\t\tself.postMessage({\r\n\t\t\tsrc: src,\r\n\t\t\tblob: blob,\r\n\t\t});\r\n\t});\r\n});\r\n*/\r\n"]}